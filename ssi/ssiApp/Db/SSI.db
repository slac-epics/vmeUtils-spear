# $Author: saa $
# $Date: 2000/12/19 15:24:04 $
# $Id: SSI.db,v 1.1.1.1 2000/12/19 15:24:04 saa Exp $
# $Name: vmeUtils-R0-0-1 $
# $Revision: 1.1.1.1 $
# $Log: SSI.db,v $
# Revision 1.1.1.1  2000/12/19 15:24:04  saa
# SSI encoder EPICS support from PSI/SLS:
# ssi is currently being maintained by:-
# David Maden email: david.maden_at_psi.ch
# Dirk Zimoch email: dirk.zimoch_at_psi.ch
#
# Revision 1.3  2000/12/19 15:24:04  maden
# Correct typos
#
# Revision 1.2  1999/07/29 09:07:47  dach
# delta calculation introduced
#
# Revision 1.1.1.1  1999/07/13 13:39:52  dach
# SSI driver for EPICS
#
# Revision 1.8  1999/06/16 13:22:21  hunt
# Added RCS IDs
#
# Revision 1.7  1999/06/15 17:48:28  hunt
# now uses 'generic' driver template with ai,ao,bo.bi,mbbi,mbbo
#
# Revision 1.6  1999/06/15 14:45:07  hunt
# Minimized use of module name (BPM) - put defines in header files
#
# Revision 1.5  1999/06/14 17:30:11  hunt
# *** empty log message ***
#
# Revision 1.4  1999/06/14 15:53:19  hunt
# *** empty log message ***
#
# Revision 1.3  1999/06/14 09:02:32  hunt
# *** empty log message ***
#
# Revision 1.2  1999/06/14 06:19:36  hunt
# *** empty log message ***
#


#  position
record(ai,"SSI:aiRead01") { 
        field(DESC,"SSI reading from 1st sensor")
        field(DTYP,"SSI")
        field(INP,"#C0 S0 @")
        field(SCAN,".1 second")
	field(FLNK,"SSI:aiRead01um")	
}
record(ai,"SSI:aiRead02") {
        field(DESC,"SSI reading from 2nd sensor")
        field(DTYP,"SSI")
        field(INP,"#C0 S1 @")
        field(SCAN,".1 second")
	field(FLNK,"SSI:aiRead02um")
}  
record(ai,"SSI:aiRead03") {
        field(DESC,"SSI reading from 3rd sensor")
        field(DTYP,"SSI")
        field(INP,"#C0 S2 @")
        field(SCAN,".1 second")
}  
record(ai,"SSI:aiRead04") {
        field(DESC,"SSI reading from 4th sensor")
        field(DTYP,"SSI")
        field(INP,"#C0 S3 @")
        field(SCAN,".1 second")
}  
record(ai,"SSI:aiRead05") {
        field(DESC,"SSI reading from 5th sensor")
        field(DTYP,"SSI")
        field(INP,"#C0 S4 @")
        field(SCAN,".1 second")
}  
record(ai,"SSI:aiRead06") {
        field(DESC,"SSI reading from 6th sensor")
        field(DTYP,"SSI")
        field(INP,"#C0 S5 @")
        field(SCAN,".1 second")
}  

## posuition in um
#  position
record(ai,"SSI:aiRead01um") { 
        field(DESC,"SSI reading from 1st sensor")
        field(DTYP,"SSI")
        field(INP,"#C0 S0 @")
        field(SCAN,"Passive")
	field(FLNK,"SSI:calc1Aux")
	field(EGUL,"0")
	field(EGUF,"1310719.844")
	field(LINR,"LINEAR")
	field(EGU,"um")

}

record(ai,"SSI:aiRead02um") {
        field(DESC,"SSI reading from 2nd sensor")
        field(DTYP,"SSI")
        field(INP,"#C0 S1 @")
        field(SCAN,"Passive")
	field(FLNK,"SSI:calc2Aux")
	field(EGUL,"0")
	field(EGUF,"1310719.844")
	field(LINR,"LINEAR")
	field(EGU,"um")
}  

#--------------------------------------------------------------------
#--------------------------------------------------------------------
#this is only the Aux.record used by the SSI:calcD1

record(calc,"SSI:calc1Aux") { 
        field(DESC,"delta: A[n] - A[n-1]")
        field(SCAN,"Passive") 
        field(CALC,"(A>B)?(A-B-C)*D:(A+C-B)*D")
        field(INPA,"SSI:aiRead01.VAL")
        field(INPB,"SSI:calc1Aux.LA")
	field(INPC,"1048576")
#value in hex "0x100000")
	field(INPD,"0.3125")
#5/16 scaling factor
	field(FLNK,"SSI:calcD1")
	field(EGU,"um")
}

# this calculates delta for SSI:aiRead01um 
record(calc,"SSI:calcD1") { 
        field(DESC,"delta: A[n] - A[n-1]")
        field(SCAN,"Passive") 
        field(CALC,"(A-B)?(ABS(A-B)>D?K:A-B):C")
        field(INPA,"SSI:aiRead01um.VAL")
        field(INPB,"SSI:calcD1.LA")
	field(INPC,"SSI:calcD1.VAL")
	field(INPD,"1024000")
#this is the threshold value to determine when to treat the
#output value differently (1024000 = 0xfa000)
	field(INPK,"SSI:calc1Aux")
	field(EGU,"um")
}
#this is only the Aux.record used by the SSI:calcD2

record(calc,"SSI:calc2Aux") { 
        field(DESC,"delta: A[n] - A[n-1]")
        field(SCAN,"Passive") 
        field(CALC,"(A>B)?(A-B-C)*D:(A+C-B)*D")
        field(INPA,"SSI:aiRead02.VAL")
        field(INPB,"SSI:calc2Aux.LA")
	field(INPC,"1048576")
#value in hex "0x100000")
	field(INPD,"0.3125")
#5/16 scaling factor
	field(FLNK,"SSI:calcD2")
	field(EGU,"um")
}

# this calculates delta for SSI:aiRead02um 
record(calc,"SSI:calcD2") { 
        field(DESC,"delta: A[n] - A[n-1]")
        field(SCAN,"Passive") 
        field(CALC,"(A-B)?(ABS(A-B)>D?K:A-B):C")
        field(INPA,"SSI:aiRead02um.VAL")
        field(INPB,"SSI:calcD2.LA")
	field(INPC,"SSI:calcD2.VAL")
	field(INPD,"1024000")
#this is the threshold value to determine when to treat the
#output value differently (1024000 = 0xfa000)
	field(INPK,"SSI:calc2Aux")
	field(EGU,"um")
}
# this formula was too long to fit in one calc record
#  field(CALC,"(A - B)? (ABS(A-B)>0xFA000? ((A>B)? \
#               (A-B-0x100000)*5/16:(A+0x100000-B)*5/16):(A-B)):C)")
#record(calc,"SSI:calcD1") { 
#        field(DESC,"delta: A[n] - A[n-1]")
#        field(SCAN,"Passive") 
#        field(CALC,"(A - B)? (A-B):C")
#        field(INPA,"SSI:aiRead01um.VAL")
#        field(INPB,"SSI:calcD1.LA")
#	field(INPC,"SSI:calcD1.VAL")
#	field(EGU,"um")
#}


## Event
record(ai,"SSI:aiEvent") { 
        field(DESC,"SSI Event nr for chan 1")
        field(DTYP,"SSI")
        field(INP,"#C0 S6 @")
        field(SCAN,"Passive")
#        field(LINR,"LINEAR")
#        field(EGUF,"10.0")
#        field(EGUL,"-10.0")
}

record(ai,"SSI:ai001") {
        field(DESC,"analogue input 1")
        field(DTYP,"XYCOM-540DI")
        field(INP,"#C0 S0 @")
        field(SCAN,".1 second")
}
record(ai,"SSI:ai002") {
        field(DESC,"analogue input 2")
        field(DTYP,"XYCOM-540DI")
        field(INP,"#C0 S1 @")
        field(SCAN,".1 second")
}
record(ai,"SSI:ai003") {
        field(DESC,"analogue input 3")
        field(DTYP,"XYCOM-540DI")
        field(INP,"#C0 S2 @")
        field(SCAN,".1 second")
}
record(ai,"SSI:ai004") {
        field(DESC,"analogue input 4")
        field(DTYP,"XYCOM-540DI")
        field(INP,"#C0 S3 @")
        field(SCAN,".1 second")
}      
#--------------------------------------------
#chan 1 and 2 in temperature

record(ai,"SSI:ai001temp") {
        field(DESC,"analogue input 1")
        field(DTYP,"XYCOM-540DI")
        field(INP,"#C0 S0 @")
        field(SCAN,".1 second")
	field(EGUL,"-62.5")
	field(EGUF,"62.5")
	field(LINR,"LINEAR")
	field(EGU,"C")
}
record(ai,"SSI:ai002temp") {
        field(DESC,"analogue input 2")
        field(DTYP,"XYCOM-540DI")
        field(INP,"#C0 S1 @")
        field(SCAN,".1 second")
	field(EGUL,"-62.5")
	field(EGUF,"62.5")
	field(LINR,"LINEAR")
	field(EGU,"C")
}
